{
  "permissions": {
    "allow": [
      "WebSearch",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__github__get_pull_request_files",
      "mcp__filesystem__read_file",
      "mcp__memory__create_entities",
      "mcp__memory__create_relations",
      "mcp__memory__delete_entities",
      "mcp__memory__delete_relations",
      "mcp__memory__get_entities",
      "mcp__memory__get_relations",
      "mcp__memory__get_entity_by_id",
      "mcp__memory__get_relation_by_id",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(ln:*)",
      "Bash(chown:*)",
      "Bash(chgrp:*)",
      "Bash(chmod:*)",
      "Bash(touch:*)",
      "Bash(echo:*)",
      "Bash(if:*)",
      "Bash(then)",
      "Bash(else)",
      "Bash(tmux show-options:*)",
      "Bash(ls:*)",
      "Bash(claude --version)",
      "Bash(claude auth status)",
      "Bash(claude config show)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(npm init:*)",
      "Bash(npm install:*)",
      "Bash(npm run:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run build:*)",
      "Bash(npm run start:*)",
      "Bash(npm run test:*)",
      "Bash(npm run lint:*)",
      "Bash(npm run format:*)",
      "Bash(git checkout:*)",
      "Bash(git switch:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git pull:*)",
      "Bash(git push:*)",
      "Bash(git branch:*)",
      "Bash(git merge:*)",
      "Bash(git rebase:*)",
      "Bash(git reset:*)",
      "Bash(git revert:*)",
      "Bash(git tag:*)",
      "Bash(git rm:*)",
      "Bash(git remote add:*)",
      "Bash(git fetch:*)",
      "Bash(git remote set-url:*)",
      "Bash(git stash:*)",
      "Bash(node:*)",
      "Bash(gh repo view:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr merge:*)",
      "Bash(gh pr close:*)",
      "Bash(gh issue edit:*)",
      "WebFetch(domain:docs.google.com)",
      "Bash(gh pr create:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue view:*)",
      "Bash(gh issue close:*)",
      "Bash(gh issue create:*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:note.com)",
      "Bash(npx @google/aside init:*)",
      "Bash(npm test)",
      "Bash(npm cache clean:*)",
      "Bash(sudo chown:*)",
      "Bash(npm --version)",
      "Bash(volta install:*)",
      "Bash(npm install)",
      "Bash(cat:*)",
      "Bash(npm install:*)",
      "Bash(npm test)",
      "Bash(rg:*)",
      "Bash(npm run test:*)",
      "Bash(volta list:*)",
      "Bash(npm config:*)",
      "Bash(npx ts-node:*)",
      "Bash(clasp:*)",
      "Bash(npm run deploy:*)",
      "WebFetch(domain:developers.google.com)",
      "mcp__github__update_issue",
      "mcp__github__create_pull_request",
      "mcp__github__merge_pull_request",
      "mcp__github__create_branch",
      "Bash(find:*)",
      "mcp__github__get_issue",
      "mcp__memory__search_nodes",
      "mcp__memory__add_observations",
      "mcp__GoogleSheets__list_spreadsheets",
      "mcp__GoogleSheets__list_sheets",
      "mcp__GoogleSheets__get_sheet_data",
      "mcp__GoogleSheets__create_sheet",
      "mcp__GoogleSheets__update_cells",
      "Bash(npx tsc:*)",
      "mcp__memory__open_nodes",
      "mcp__github__list_pull_requests",
      "mcp__github__get_pull_request",
      "mcp__github__list_commits",
      "mcp__brave-search__brave_web_search",
      "WebFetch(domain:stackoverflow.com)",
      "WebFetch(domain:copyprogramming.com)",
      "WebFetch(domain:groups.google.com)",
      "mcp__memory__read_graph",
      "mcp__filesystem__directory_tree",
      "mcp__filesystem__list_directory",
      "Bash(diff:*)",
      "mcp__github__create_issue",
      "Bash(grep:*)",
      "Bash(do:*)",
      "Bash(done)",
      "Bash(BACKUP_DIR=\"backup/20250726_194656\")",
      "Bash(true)",
      "Bash(for:*)",
      "Bash(npm:*)",
      "Bash(echo:*)",
      "Bash(if:*)",
      "Bash(then:*)",
      "Bash(else:*)",
      "Bash(fi:*)",
      "Bash(npx jest:*)",
      "mcp__github__list_issues",
      "Bash(tree:*)",
      "Bash(gh pr edit:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr diff:*)",
      "Bash(git ls-tree:*)",
      "Bash(VITE_BUILD_TARGET=character-manager VITE_BUILD_ENTRY=src/gas-adapters/character-manager.ts npx vite build --config vite.config.ts)",
      "Bash(npx eslint:*)",
      "mcp__filesystem__create_directory",
      "mcp__filesystem__write_file",
      "Bash(git restore:*)",
      "Bash(git check-ignore:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh run view:*)",
      "Bash(gh run list:*)",
      "mcp__serena__activate_project",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__list_dir",
      "mcp__serena__search_for_pattern",
      "mcp__serena__write_memory",
      "mcp__serena__read_file",
      "mcp__serena__activate_project",
      "mcp__notionApi__API-post-database-query",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(ls:*)",
      "Bash(mv:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(rm:*)",
      "Bash(git commit:*)",
      "Bash(gh repo create:*)",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(git remote set-url:*)",
      "Bash(mkdir:*)",
      "Bash(gh issue create:*)",
      "Bash(gh label create:*)",
      "mcp__memory__read_graph",
      "mcp__memory__add_observations",
      "mcp__github__get_issue",
      "Bash(npx create-next-app:*)",
      "Bash(npm init:*)",
      "Bash(npm install:*)",
      "Bash(npx next lint:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(find:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run lint)",
      "mcp__github__add_issue_comment",
      "mcp__serena__get_current_config",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__list_dir",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__write_memory",
      "mcp__serena__execute_shell_command",
      "mcp__github__create_pull_request",
      "mcp__github__merge_pull_request",
      "mcp__serena__replace_regex",
      "mcp__serena__create_text_file",
      "Bash(npm run format:check:*)",
      "Bash(npm run format:*)",
      "Bash(npm run build:*)",
      "Bash(gh pr create:*)",
      "mcp__memory__create_entities",
      "Bash(git checkout:*)",
      "Bash(git pull:*)",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__read_memory",
      "mcp__github__get_pull_request",
      "mcp__github__list_issues",
      "mcp__github__update_issue",
      "mcp__github__create_issue",
      "WebFetch(domain:docs.github.com)",
      "WebFetch(domain:docs.cursor.com)",
      "WebFetch(domain:docs.roocode.com)",
      "mcp__github__get_file_contents",
      "mcp__github__push_files",
      "mcp__filesystem__read_text_file",
      "mcp__github__search_issues",
      "mcp__github__get_pull_request_status",
      "WebFetch(domain:bundlephobia.com)",
      "mcp__github__search_repositories",
      "mcp__github__create_pull_request_review",
      "mcp__filesystem__search_files",
      "mcp__filesystem__read_multiple_files",
      "mcp__github__get_pull_request_reviews",
      "mcp__serena__find_symbol",
      "mcp__github__get_pull_request_comments",
      "Bash(gh issue comment:*)",
      "Bash(cd:*)",
      "Bash(git cherry-pick:*)",
      "mcp__serena__find_file",
      "Bash(git -C:*)",
      "Bash(jest:*)",
      "Bash(git log:*)",
      "Bash(awk:*)",
      "Bash(sed:*)",
      "Bash(od:*)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "context7",
    "github",
    "memory",
    "filesystem",
    "sequential-thinking",
    "iterm-mcp",
    "notionApi",
    "GoogleSheets",
    "serena"
  ],
  "hooks": {
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "afplay /System/Library/Sounds/Glass.aiff"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "afplay /System/Library/Sounds/Ping.aiff"
          }
        ]
      }
    ]
  }
}
