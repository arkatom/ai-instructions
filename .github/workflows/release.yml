name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'templates/**'
      - 'instructions/**'
      - 'src/**'
      - 'package.json'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Validate NPM Token
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "‚ùå NPM_TOKEN secret is not set"
            exit 1
          fi
          npm whoami || (echo "‚ùå Invalid NPM_TOKEN" && exit 1)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Run tests with coverage
        run: |
          npm test -- --coverage --watchAll=false || true
          npm test
      
      - name: Check if version bump needed
        id: check
        run: |
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          PACKAGE_VERSION="v$(node -p "require('./package.json').version")"
          
          echo "Latest tag: $LATEST_TAG"
          echo "Package version: $PACKAGE_VERSION"
          
          # Fix: Correct logic - bump if versions are different or no tags exist
          if [ "$LATEST_TAG" != "$PACKAGE_VERSION" ] || [ "$LATEST_TAG" = "v0.0.0" ]; then
            echo "needs_bump=true" >> $GITHUB_OUTPUT
            echo "current_version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT
          else
            echo "needs_bump=false" >> $GITHUB_OUTPUT
            echo "current_version=${PACKAGE_VERSION#v}" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Version already bumped, skipping release"
          fi
      
      - name: Configure Git
        if: steps.check.outputs.needs_bump == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Bump version
        if: steps.check.outputs.needs_bump == 'true'
        id: version
        run: |
          # Temporarily disable postversion hook to avoid conflicts
          npm config set ignore-scripts true
          npm version patch --no-git-tag-version
          npm config set ignore-scripts false
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Manually create commit and tag
          git add package.json package-lock.json
          git commit -m "chore(release): $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
      
      - name: Push version commit with retry
        if: steps.check.outputs.needs_bump == 'true'
        run: |
          set -e
          for i in {1..3}; do
            if git push origin main && git push origin --tags; then
              echo "‚úÖ Successfully pushed changes"
              break
            elif [ $i -eq 3 ]; then
              echo "‚ùå Failed to push after 3 attempts"
              exit 1
            else
              echo "‚ö†Ô∏è Push attempt $i failed, retrying in 5 seconds..."
              sleep 5
              git pull --rebase origin main || true
            fi
          done
      
      - name: Publish to npm
        if: steps.check.outputs.needs_bump == 'true'
        run: |
          # Ensure we're publishing the correct version
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Generate Release Notes
        if: steps.check.outputs.needs_bump == 'true'
        id: release_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges | grep -v "chore(release):" || echo "- Various improvements and fixes")
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges --max-count=10 | grep -v "chore(release):" || echo "- Initial release")
          fi
          
          # Escape special characters for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'
'/'%0A'}"
          CHANGELOG="${CHANGELOG//$''/'%0D'}"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        if: steps.check.outputs.needs_bump == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## üöÄ Release v${{ steps.version.outputs.new_version }}
            
            ### üìù Changes
            ${{ steps.release_notes.outputs.changelog }}
            
            ### üì¶ Installation
            ```bash
            npm install @arkatom/ai-instructions@${{ steps.version.outputs.new_version }}
            ```
            
            ### üîó Links
            - [NPM Package](https://www.npmjs.com/package/@arkatom/ai-instructions/v/${{ steps.version.outputs.new_version }})
            - [Changelog](https://github.com/${{ github.repository }}/compare/${{ steps.check.outputs.current_version }}...v${{ steps.version.outputs.new_version }})
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify success
        if: success() && steps.check.outputs.needs_bump == 'true'
        run: |
          echo "‚úÖ Successfully released v${{ steps.version.outputs.new_version }}"
          echo "üì¶ NPM: https://www.npmjs.com/package/@arkatom/ai-instructions/v/${{ steps.version.outputs.new_version }}"
          echo "üè∑Ô∏è GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }}"
      
      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Release failed. Please check the logs."
          echo "üîç Debug information:"
          echo "   - Actor: ${{ github.actor }}"
          echo "   - Branch: ${{ github.ref }}"
          echo "   - Commit: ${{ github.sha }}"
          exit 1