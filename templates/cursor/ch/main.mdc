---
description: {{projectName}}的主要开发指令
globs:
  - "**/*.ts"
  - "**/*.tsx" 
  - "**/*.js"
  - "**/*.jsx"
  - "**/*.json"
  - "**/*.md"
alwaysApply: true
---

# Cursor AI 开发规则 - {{projectName}}

## 🚨 绝对要求

### 测试驱动开发 (TDD)
- 始终先写测试（Red-Green-Refactor）
- 维持90%以上测试覆盖率
- 编写全面的单元、集成、E2E测试
- 适当模拟外部依赖

### 代码质量标准
- 使用具有适当类型的严格TypeScript
- 遵循清洁架构原则
- 实施全面的错误处理
- 维持一致的代码格式

## 📋 开发工作流

### Issue驱动开发
- 所有工作必须链接到GitHub Issues
- 将大任务分解为小的可管理Issues
- 使用GitHub Flow分支策略
- 创建描述性的提交消息

### Git最佳实践
- 分支命名: `feature/{issue号码}_{描述}`
- 常规提交: `type(scope): #issue 描述`
- 始终为代码审查创建PR
- 包含全面的PR描述

## 🔧 TypeScript/JavaScript 指南

### 代码结构
```typescript
// 函数结构示例
export async function processData(input: DataInput): Promise<ProcessedData> {
  // 输入验证
  if (!input || !input.isValid()) {
    throw new ValidationError('无效的输入数据');
  }
  
  try {
    // 核心逻辑
    const result = await transformData(input);
    return result;
  } catch (error) {
    // 错误处理
    throw new ProcessingError(`处理数据失败: ${error.message}`);
  }
}
```

## 🎯 架构原则

### SOLID原则
- 单一职责: 每个类/函数有一个目的
- 开闭原则: 对扩展开放，对修改关闭
- 里氏替换: 派生类必须可替换
- 接口隔离: 使用特定的接口
- 依赖倒置: 依赖于抽象

## 🚀 质量保证

### 提交前
- [ ] 所有测试通过
- [ ] 代码覆盖率达到阈值
- [ ] ESLint/Prettier通过
- [ ] 类型检查通过
- [ ] 手动测试完成

优先考虑代码质量和可维护性而非开发速度。编写未来的自己会感谢的代码。