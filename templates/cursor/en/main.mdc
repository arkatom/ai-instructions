---
description: Main development instructions for {{projectName}}
globs:
  - "**/*.ts"
  - "**/*.tsx" 
  - "**/*.js"
  - "**/*.jsx"
  - "**/*.json"
  - "**/*.md"
alwaysApply: true
---

# Cursor AI Development Rules - {{projectName}}

## ðŸš¨ Absolute Requirements

### Test-Driven Development (TDD)
- ALWAYS write tests first (Red-Green-Refactor)
- Maintain test coverage above 90%
- Write comprehensive unit, integration, and E2E tests
- Mock external dependencies appropriately

### Code Quality Standards
- Use strict TypeScript with proper typing
- Follow clean architecture principles
- Implement comprehensive error handling
- Maintain consistent code formatting

## ðŸ“‹ Development Workflow

### Issue-Driven Development
- All work must be linked to GitHub Issues
- Break large tasks into smaller, manageable Issues
- Use GitHub Flow branch strategy
- Create descriptive commit messages

### Git Best Practices
- Branch naming: `feature/{issue-number}_{description}`
- Conventional commits: `type(scope): #issue description`
- Always create PRs for code review
- Include comprehensive PR descriptions

## ðŸ”§ TypeScript/JavaScript Guidelines

### Code Structure
```typescript
// Example function structure
export async function processData(input: DataInput): Promise<ProcessedData> {
  // Input validation
  if (!input || !input.isValid()) {
    throw new ValidationError('Invalid input data');
  }
  
  try {
    // Core logic
    const result = await transformData(input);
    return result;
  } catch (error) {
    // Error handling
    throw new ProcessingError(`Failed to process data: ${error.message}`);
  }
}
```

### Testing Patterns
```typescript
// Test structure example
describe('ProcessData', () => {
  it('should process valid input successfully', async () => {
    // Arrange
    const input = createValidInput();
    
    // Act
    const result = await processData(input);
    
    // Assert
    expect(result).toBeDefined();
    expect(result.status).toBe('success');
  });
});
```

## ðŸŽ¯ Architecture Principles

### SOLID Principles
- Single Responsibility: Each class/function has one purpose
- Open/Closed: Open for extension, closed for modification
- Liskov Substitution: Derived classes must be substitutable
- Interface Segregation: Use specific interfaces
- Dependency Inversion: Depend on abstractions

### Clean Code
- Use descriptive variable and function names
- Keep functions small and focused
- Avoid deep nesting (max 3 levels)
- Extract complex logic into separate functions

## ðŸ“Š Performance & Security

### Performance Optimization
- Use efficient algorithms and data structures
- Implement proper caching strategies
- Avoid unnecessary re-renders in React
- Profile performance-critical code

### Security Best Practices
- Validate and sanitize all inputs
- Use parameterized queries for database access
- Keep dependencies updated
- Follow OWASP security guidelines

## ðŸš€ Quality Assurance

### Before Committing
- [ ] All tests pass
- [ ] Code coverage meets threshold
- [ ] ESLint/Prettier passes
- [ ] Type checking passes
- [ ] Manual testing completed

### Documentation Requirements
- JSDoc comments for all public APIs
- README updates for new features
- API documentation for endpoints
- Inline comments for complex logic

Remember: Prioritize code quality and maintainability over development speed. Write code that your future self will thank you for.