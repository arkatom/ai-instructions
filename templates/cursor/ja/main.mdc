---
description: {{projectName}}のメイン開発指示
globs:
  - "**/*.ts"
  - "**/*.tsx" 
  - "**/*.js"
  - "**/*.jsx"
  - "**/*.json"
  - "**/*.md"
alwaysApply: true
---

# Cursor AI 開発ルール - {{projectName}}

## 🚨 絶対要件

### テスト駆動開発 (TDD)
- 常にテストを最初に書く（Red-Green-Refactor）
- テストカバレッジ90%以上を維持
- 包括的なunit、integration、E2Eテストを書く
- 外部依存関係を適切にモック

### コード品質基準
- 適切な型付けでstrict TypeScriptを使用
- クリーンアーキテクチャ原則に従う
- 包括的なエラーハンドリングを実装
- 一貫したコードフォーマットを維持

## 📋 開発ワークフロー

### Issue駆動開発
- すべての作業はGitHub Issuesにリンクする必要がある
- 大きなタスクを小さく管理可能なIssuesに分割
- GitHub Flowブランチ戦略を使用
- 説明的なコミットメッセージを作成

### Git ベストプラクティス
- ブランチ命名: `feature/{issue番号}_{説明}`
- 従来のコミット: `type(scope): #issue 説明`
- コードレビューのため常にPRを作成
- 包括的なPR説明を含める

## 🔧 TypeScript/JavaScript ガイドライン

### コード構造
```typescript
// 関数構造の例
export async function processData(input: DataInput): Promise<ProcessedData> {
  // 入力検証
  if (!input || !input.isValid()) {
    throw new ValidationError('無効な入力データ');
  }
  
  try {
    // コアロジック
    const result = await transformData(input);
    return result;
  } catch (error) {
    // エラーハンドリング
    throw new ProcessingError(`データ処理に失敗: ${error.message}`);
  }
}
```

## 🎯 アーキテクチャ原則

### SOLID原則
- 単一責任: 各クラス/関数は一つの目的を持つ
- 開放閉鎖: 拡張に対して開かれ、修正に対して閉じている
- リスコフ置換: 派生クラスは置換可能でなければならない
- インターフェース分離: 特定のインターフェースを使用
- 依存性逆転: 抽象に依存する

## 🚀 品質保証

### コミット前
- [ ] すべてのテストがパス
- [ ] コードカバレッジがしきい値を満たす
- [ ] ESLint/Prettierがパス
- [ ] 型チェックがパス
- [ ] 手動テストが完了

コード品質と保守性を開発速度より優先すること。未来の自分が感謝するコードを書く。